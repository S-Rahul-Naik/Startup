{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\23rah\\\\OneDrive\\\\Desktop\\\\HUB\\\\startup\\\\client\\\\src\\\\contexts\\\\CartContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// Types\n\n// Action Types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Initial State\nconst initialState = {\n  items: [],\n  total: 0,\n  itemCount: 0\n};\n\n// Reducer\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TO_CART':\n      {\n        const existingItem = state.items.find(item => item._id === action.payload._id);\n        if (existingItem) {\n          // Update quantity if item already exists\n          const updatedItems = state.items.map(item => item._id === action.payload._id ? {\n            ...item,\n            quantity: item.quantity + 1\n          } : item);\n          return calculateCartTotals(updatedItems);\n        } else {\n          // Add new item with quantity 1\n          const newItem = {\n            ...action.payload,\n            quantity: 1\n          };\n          const updatedItems = [...state.items, newItem];\n          return calculateCartTotals(updatedItems);\n        }\n      }\n    case 'REMOVE_FROM_CART':\n      {\n        const updatedItems = state.items.filter(item => item._id !== action.payload);\n        return calculateCartTotals(updatedItems);\n      }\n    case 'UPDATE_QUANTITY':\n      {\n        const {\n          itemId,\n          quantity\n        } = action.payload;\n        if (quantity <= 0) {\n          // Remove item if quantity is 0 or negative\n          const updatedItems = state.items.filter(item => item._id !== itemId);\n          return calculateCartTotals(updatedItems);\n        }\n        const updatedItems = state.items.map(item => item._id === itemId ? {\n          ...item,\n          quantity\n        } : item);\n        return calculateCartTotals(updatedItems);\n      }\n    case 'CLEAR_CART':\n      {\n        return initialState;\n      }\n    case 'LOAD_CART':\n      {\n        return calculateCartTotals(action.payload);\n      }\n    default:\n      return state;\n  }\n};\n\n// Helper function to calculate cart totals\nconst calculateCartTotals = items => {\n  const total = items.reduce((sum, item) => {\n    const price = item.discount ? item.price - item.price * item.discount / 100 : item.price;\n    return sum + price * item.quantity;\n  }, 0);\n  const itemCount = items.reduce((sum, item) => sum + item.quantity, 0);\n  return {\n    items,\n    total: Math.round(total * 100) / 100,\n    // Round to 2 decimal places\n    itemCount\n  };\n};\n\n// Create Context\nconst CartContext = /*#__PURE__*/createContext(undefined);\n\n// Provider Component\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(cartReducer, initialState);\n\n  // Load cart from localStorage on mount\n  useEffect(() => {\n    const savedCart = localStorage.getItem('edutech-cart');\n    if (savedCart) {\n      try {\n        const parsedCart = JSON.parse(savedCart);\n        dispatch({\n          type: 'LOAD_CART',\n          payload: parsedCart\n        });\n      } catch (error) {\n        console.error('Failed to parse saved cart:', error);\n        localStorage.removeItem('edutech-cart');\n      }\n    }\n  }, []);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('edutech-cart', JSON.stringify(state.items));\n  }, [state.items]);\n\n  // Add item to cart\n  const addToCart = item => {\n    dispatch({\n      type: 'ADD_TO_CART',\n      payload: item\n    });\n  };\n\n  // Remove item from cart\n  const removeFromCart = itemId => {\n    dispatch({\n      type: 'REMOVE_FROM_CART',\n      payload: itemId\n    });\n  };\n\n  // Update item quantity\n  const updateQuantity = (itemId, quantity) => {\n    dispatch({\n      type: 'UPDATE_QUANTITY',\n      payload: {\n        itemId,\n        quantity\n      }\n    });\n  };\n\n  // Clear entire cart\n  const clearCart = () => {\n    dispatch({\n      type: 'CLEAR_CART'\n    });\n  };\n\n  // Check if item is in cart\n  const isInCart = itemId => {\n    return state.items.some(item => item._id === itemId);\n  };\n  const value = {\n    ...state,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    isInCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook to use cart context\n_s(CartProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default CartContext;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","initialState","items","total","itemCount","cartReducer","state","action","type","existingItem","find","item","_id","payload","updatedItems","map","quantity","calculateCartTotals","newItem","filter","itemId","reduce","sum","price","discount","Math","round","CartContext","undefined","CartProvider","children","_s","dispatch","savedCart","localStorage","getItem","parsedCart","JSON","parse","error","console","removeItem","setItem","stringify","addToCart","removeFromCart","updateQuantity","clearCart","isInCart","some","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/23rah/OneDrive/Desktop/HUB/startup/client/src/contexts/CartContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\r\n\r\n// Types\r\ninterface CartItem {\r\n  _id: string;\r\n  title: string;\r\n  price: number;\r\n  originalPrice?: number;\r\n  discount?: number;\r\n  image?: string;\r\n  domain: string;\r\n  category: string;\r\n  quantity: number;\r\n}\r\n\r\ninterface CartState {\r\n  items: CartItem[];\r\n  total: number;\r\n  itemCount: number;\r\n}\r\n\r\ninterface CartContextType extends CartState {\r\n  addToCart: (item: Omit<CartItem, 'quantity'>) => void;\r\n  removeFromCart: (itemId: string) => void;\r\n  updateQuantity: (itemId: string, quantity: number) => void;\r\n  clearCart: () => void;\r\n  isInCart: (itemId: string) => boolean;\r\n}\r\n\r\n// Action Types\r\ntype CartAction =\r\n  | { type: 'ADD_TO_CART'; payload: Omit<CartItem, 'quantity'> }\r\n  | { type: 'REMOVE_FROM_CART'; payload: string }\r\n  | { type: 'UPDATE_QUANTITY'; payload: { itemId: string; quantity: number } }\r\n  | { type: 'CLEAR_CART' }\r\n  | { type: 'LOAD_CART'; payload: CartItem[] };\r\n\r\n// Initial State\r\nconst initialState: CartState = {\r\n  items: [],\r\n  total: 0,\r\n  itemCount: 0,\r\n};\r\n\r\n// Reducer\r\nconst cartReducer = (state: CartState, action: CartAction): CartState => {\r\n  switch (action.type) {\r\n    case 'ADD_TO_CART': {\r\n      const existingItem = state.items.find(item => item._id === action.payload._id);\r\n      \r\n      if (existingItem) {\r\n        // Update quantity if item already exists\r\n        const updatedItems = state.items.map(item =>\r\n          item._id === action.payload._id\r\n            ? { ...item, quantity: item.quantity + 1 }\r\n            : item\r\n        );\r\n        \r\n        return calculateCartTotals(updatedItems);\r\n      } else {\r\n        // Add new item with quantity 1\r\n        const newItem = { ...action.payload, quantity: 1 };\r\n        const updatedItems = [...state.items, newItem];\r\n        \r\n        return calculateCartTotals(updatedItems);\r\n      }\r\n    }\r\n\r\n    case 'REMOVE_FROM_CART': {\r\n      const updatedItems = state.items.filter(item => item._id !== action.payload);\r\n      return calculateCartTotals(updatedItems);\r\n    }\r\n\r\n    case 'UPDATE_QUANTITY': {\r\n      const { itemId, quantity } = action.payload;\r\n      \r\n      if (quantity <= 0) {\r\n        // Remove item if quantity is 0 or negative\r\n        const updatedItems = state.items.filter(item => item._id !== itemId);\r\n        return calculateCartTotals(updatedItems);\r\n      }\r\n      \r\n      const updatedItems = state.items.map(item =>\r\n        item._id === itemId ? { ...item, quantity } : item\r\n      );\r\n      \r\n      return calculateCartTotals(updatedItems);\r\n    }\r\n\r\n    case 'CLEAR_CART': {\r\n      return initialState;\r\n    }\r\n\r\n    case 'LOAD_CART': {\r\n      return calculateCartTotals(action.payload);\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Helper function to calculate cart totals\r\nconst calculateCartTotals = (items: CartItem[]): CartState => {\r\n  const total = items.reduce((sum, item) => {\r\n    const price = item.discount ? \r\n      item.price - (item.price * item.discount / 100) : \r\n      item.price;\r\n    return sum + (price * item.quantity);\r\n  }, 0);\r\n  \r\n  const itemCount = items.reduce((sum, item) => sum + item.quantity, 0);\r\n  \r\n  return {\r\n    items,\r\n    total: Math.round(total * 100) / 100, // Round to 2 decimal places\r\n    itemCount,\r\n  };\r\n};\r\n\r\n// Create Context\r\nconst CartContext = createContext<CartContextType | undefined>(undefined);\r\n\r\n// Provider Component\r\nexport const CartProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [state, dispatch] = useReducer(cartReducer, initialState);\r\n\r\n  // Load cart from localStorage on mount\r\n  useEffect(() => {\r\n    const savedCart = localStorage.getItem('edutech-cart');\r\n    if (savedCart) {\r\n      try {\r\n        const parsedCart = JSON.parse(savedCart);\r\n        dispatch({ type: 'LOAD_CART', payload: parsedCart });\r\n      } catch (error) {\r\n        console.error('Failed to parse saved cart:', error);\r\n        localStorage.removeItem('edutech-cart');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Save cart to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('edutech-cart', JSON.stringify(state.items));\r\n  }, [state.items]);\r\n\r\n  // Add item to cart\r\n  const addToCart = (item: Omit<CartItem, 'quantity'>) => {\r\n    dispatch({ type: 'ADD_TO_CART', payload: item });\r\n  };\r\n\r\n  // Remove item from cart\r\n  const removeFromCart = (itemId: string) => {\r\n    dispatch({ type: 'REMOVE_FROM_CART', payload: itemId });\r\n  };\r\n\r\n  // Update item quantity\r\n  const updateQuantity = (itemId: string, quantity: number) => {\r\n    dispatch({ type: 'UPDATE_QUANTITY', payload: { itemId, quantity } });\r\n  };\r\n\r\n  // Clear entire cart\r\n  const clearCart = () => {\r\n    dispatch({ type: 'CLEAR_CART' });\r\n  };\r\n\r\n  // Check if item is in cart\r\n  const isInCart = (itemId: string): boolean => {\r\n    return state.items.some(item => item._id === itemId);\r\n  };\r\n\r\n  const value: CartContextType = {\r\n    ...state,\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    clearCart,\r\n    isInCart,\r\n  };\r\n\r\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\r\n};\r\n\r\n// Custom hook to use cart context\r\nexport const useCart = (): CartContextType => {\r\n  const context = useContext(CartContext);\r\n  if (context === undefined) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default CartContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}